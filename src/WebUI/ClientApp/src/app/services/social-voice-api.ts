/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.4.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class IssueService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    create(command: CreateIssueCommand) : Observable<void> {
        let url_ = this.baseUrl + "/api/issues";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Result.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = Result.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getAll(limit: number | undefined, offset: number | undefined, search: string | null | undefined) : Observable<BaseViewOfIssuesListDto> {
        let url_ = this.baseUrl + "/api/issues?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<BaseViewOfIssuesListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BaseViewOfIssuesListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<BaseViewOfIssuesListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseViewOfIssuesListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BaseViewOfIssuesListDto>(<any>null);
    }

    get(id: number) : Observable<IssueDetailDto> {
        let url_ = this.baseUrl + "/api/issues/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<IssueDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IssueDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<IssueDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IssueDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Result.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IssueDetailDto>(<any>null);
    }

    votePro(command: VoteProIssueCommand) : Observable<void> {
        let url_ = this.baseUrl + "/api/issues/vote/pro";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVotePro(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVotePro(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processVotePro(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Result.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Result.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    voteCon(command: VoteConIssueCommand) : Observable<void> {
        let url_ = this.baseUrl + "/api/issues/vote/con";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVoteCon(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVoteCon(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processVoteCon(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = Result.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Result.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class OrganizationService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(id: number) : Observable<OrganizationDetailDto2> {
        let url_ = this.baseUrl + "/api/organizations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationDetailDto2>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationDetailDto2>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OrganizationDetailDto2> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationDetailDto2.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = Result.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationDetailDto2>(<any>null);
    }

    getAll(limit: number | undefined, offset: number | undefined, search: string | null | undefined) : Observable<BaseViewOfOrganizationsListDto> {
        let url_ = this.baseUrl + "/api/organizations?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<BaseViewOfOrganizationsListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BaseViewOfOrganizationsListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<BaseViewOfOrganizationsListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseViewOfOrganizationsListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BaseViewOfOrganizationsListDto>(<any>null);
    }
}

export class Result implements IResult {
    succeeded?: boolean;
    errors?: string[] | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data; 
    }
}

export interface IResult {
    succeeded?: boolean;
    errors?: string[] | undefined;
}

export class CreateIssueCommand implements ICreateIssueCommand {
    organizationId?: number;
    title?: string | undefined;
    content?: string | undefined;

    constructor(data?: ICreateIssueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationId = _data["organizationId"];
            this.title = _data["title"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CreateIssueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIssueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationId"] = this.organizationId;
        data["title"] = this.title;
        data["content"] = this.content;
        return data; 
    }
}

export interface ICreateIssueCommand {
    organizationId?: number;
    title?: string | undefined;
    content?: string | undefined;
}

export class IssueDetailDto implements IIssueDetailDto {
    id?: number;
    issueUid?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    state?: IssueState;
    organization?: OrganizationDetailDto | undefined;
    feedbacks?: FeedbackDetailDto[] | undefined;
    created?: Date;

    constructor(data?: IIssueDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.issueUid = _data["issueUid"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.state = _data["state"];
            this.organization = _data["organization"] ? OrganizationDetailDto.fromJS(_data["organization"]) : <any>undefined;
            if (Array.isArray(_data["feedbacks"])) {
                this.feedbacks = [] as any;
                for (let item of _data["feedbacks"])
                    this.feedbacks!.push(FeedbackDetailDto.fromJS(item));
            }
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IssueDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new IssueDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["issueUid"] = this.issueUid;
        data["title"] = this.title;
        data["content"] = this.content;
        data["state"] = this.state;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>undefined;
        if (Array.isArray(this.feedbacks)) {
            data["feedbacks"] = [];
            for (let item of this.feedbacks)
                data["feedbacks"].push(item.toJSON());
        }
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IIssueDetailDto {
    id?: number;
    issueUid?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    state?: IssueState;
    organization?: OrganizationDetailDto | undefined;
    feedbacks?: FeedbackDetailDto[] | undefined;
    created?: Date;
}

export enum IssueState {
    NotSolved = 0,
    Solved = 1,
}

export class OrganizationDetailDto implements IOrganizationDetailDto {
    id?: number;
    name?: string | undefined;
    brand?: string | undefined;
    regionName?: string | undefined;
    districtName?: string | undefined;

    constructor(data?: IOrganizationDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.brand = _data["brand"];
            this.regionName = _data["regionName"];
            this.districtName = _data["districtName"];
        }
    }

    static fromJS(data: any): OrganizationDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["brand"] = this.brand;
        data["regionName"] = this.regionName;
        data["districtName"] = this.districtName;
        return data; 
    }
}

export interface IOrganizationDetailDto {
    id?: number;
    name?: string | undefined;
    brand?: string | undefined;
    regionName?: string | undefined;
    districtName?: string | undefined;
}

export class FeedbackDetailDto implements IFeedbackDetailDto {
    id?: number;
    content?: string | undefined;
    pros?: number;
    cons?: number;
    created?: Date;

    constructor(data?: IFeedbackDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
            this.pros = _data["pros"];
            this.cons = _data["cons"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FeedbackDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new FeedbackDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        data["pros"] = this.pros;
        data["cons"] = this.cons;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IFeedbackDetailDto {
    id?: number;
    content?: string | undefined;
    pros?: number;
    cons?: number;
    created?: Date;
}

export class BaseViewOfIssuesListDto implements IBaseViewOfIssuesListDto {
    data?: IssuesListDto[] | undefined;
    total?: number;

    constructor(data?: IBaseViewOfIssuesListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(IssuesListDto.fromJS(item));
            }
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): BaseViewOfIssuesListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseViewOfIssuesListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        return data; 
    }
}

export interface IBaseViewOfIssuesListDto {
    data?: IssuesListDto[] | undefined;
    total?: number;
}

export class IssuesListDto implements IIssuesListDto {
    id?: number;
    issueUid?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    organizationName?: string | undefined;
    regionName?: string | undefined;
    pros?: number;
    cons?: number;
    created?: Date;

    constructor(data?: IIssuesListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.issueUid = _data["issueUid"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.organizationName = _data["organizationName"];
            this.regionName = _data["regionName"];
            this.pros = _data["pros"];
            this.cons = _data["cons"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IssuesListDto {
        data = typeof data === 'object' ? data : {};
        let result = new IssuesListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["issueUid"] = this.issueUid;
        data["title"] = this.title;
        data["content"] = this.content;
        data["organizationName"] = this.organizationName;
        data["regionName"] = this.regionName;
        data["pros"] = this.pros;
        data["cons"] = this.cons;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IIssuesListDto {
    id?: number;
    issueUid?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    organizationName?: string | undefined;
    regionName?: string | undefined;
    pros?: number;
    cons?: number;
    created?: Date;
}

export class VoteProIssueCommand implements IVoteProIssueCommand {
    id?: number;

    constructor(data?: IVoteProIssueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): VoteProIssueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new VoteProIssueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IVoteProIssueCommand {
    id?: number;
}

export class VoteConIssueCommand implements IVoteConIssueCommand {
    id?: number;

    constructor(data?: IVoteConIssueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): VoteConIssueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new VoteConIssueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IVoteConIssueCommand {
    id?: number;
}

export class OrganizationDetailDto2 implements IOrganizationDetailDto2 {
    id?: number;
    name?: string | undefined;
    brand?: string | undefined;
    inn?: number;
    street?: string | undefined;
    phone?: string | undefined;
    location?: string | undefined;
    pros?: number;
    cons?: number;
    regionName?: string | undefined;
    districtName?: string | undefined;
    issues?: OrganizationIssueDetailDto[] | undefined;

    constructor(data?: IOrganizationDetailDto2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.brand = _data["brand"];
            this.inn = _data["inn"];
            this.street = _data["street"];
            this.phone = _data["phone"];
            this.location = _data["location"];
            this.pros = _data["pros"];
            this.cons = _data["cons"];
            this.regionName = _data["regionName"];
            this.districtName = _data["districtName"];
            if (Array.isArray(_data["issues"])) {
                this.issues = [] as any;
                for (let item of _data["issues"])
                    this.issues!.push(OrganizationIssueDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrganizationDetailDto2 {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationDetailDto2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["brand"] = this.brand;
        data["inn"] = this.inn;
        data["street"] = this.street;
        data["phone"] = this.phone;
        data["location"] = this.location;
        data["pros"] = this.pros;
        data["cons"] = this.cons;
        data["regionName"] = this.regionName;
        data["districtName"] = this.districtName;
        if (Array.isArray(this.issues)) {
            data["issues"] = [];
            for (let item of this.issues)
                data["issues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrganizationDetailDto2 {
    id?: number;
    name?: string | undefined;
    brand?: string | undefined;
    inn?: number;
    street?: string | undefined;
    phone?: string | undefined;
    location?: string | undefined;
    pros?: number;
    cons?: number;
    regionName?: string | undefined;
    districtName?: string | undefined;
    issues?: OrganizationIssueDetailDto[] | undefined;
}

export class OrganizationIssueDetailDto implements IOrganizationIssueDetailDto {
    id?: number;
    issueUid?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    created?: Date;

    constructor(data?: IOrganizationIssueDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.issueUid = _data["issueUid"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrganizationIssueDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationIssueDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["issueUid"] = this.issueUid;
        data["title"] = this.title;
        data["content"] = this.content;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IOrganizationIssueDetailDto {
    id?: number;
    issueUid?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    created?: Date;
}

export class BaseViewOfOrganizationsListDto implements IBaseViewOfOrganizationsListDto {
    data?: OrganizationsListDto[] | undefined;
    total?: number;

    constructor(data?: IBaseViewOfOrganizationsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(OrganizationsListDto.fromJS(item));
            }
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): BaseViewOfOrganizationsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseViewOfOrganizationsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        return data; 
    }
}

export interface IBaseViewOfOrganizationsListDto {
    data?: OrganizationsListDto[] | undefined;
    total?: number;
}

export class OrganizationsListDto implements IOrganizationsListDto {
    id?: number;
    name?: string | undefined;
    brand?: string | undefined;
    inn?: number;
    street?: string | undefined;
    phone?: string | undefined;
    location?: string | undefined;
    regionName?: string | undefined;

    constructor(data?: IOrganizationsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.brand = _data["brand"];
            this.inn = _data["inn"];
            this.street = _data["street"];
            this.phone = _data["phone"];
            this.location = _data["location"];
            this.regionName = _data["regionName"];
        }
    }

    static fromJS(data: any): OrganizationsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["brand"] = this.brand;
        data["inn"] = this.inn;
        data["street"] = this.street;
        data["phone"] = this.phone;
        data["location"] = this.location;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IOrganizationsListDto {
    id?: number;
    name?: string | undefined;
    brand?: string | undefined;
    inn?: number;
    street?: string | undefined;
    phone?: string | undefined;
    location?: string | undefined;
    regionName?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}